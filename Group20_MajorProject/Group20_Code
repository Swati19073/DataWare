{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mysql.connector\n",
    "from mysql.connector import Error\n",
    "from mysql.connector import errorcode\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "directory='Datasets/DW/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "x = datetime.datetime.now()\n",
    "cur_year=x.year\n",
    "print(cur_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "cur_date=datetime.now()\n",
    "cur_day=cur_date.day\n",
    "cur_month=cur_date.month\n",
    "drop_year=cur_year-5\n",
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "    if(cur_month==12 and cur_day==31):\n",
    "        queryDelete=\"Delete from year where year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        queryDelete=\"Delete from fees where year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        queryDelete=\"Delete from academics where year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        queryDelete=\"Delete from extracurricular where year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        \n",
    "        queryDelete=\"Delete from reputation where year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        queryDelete=\"Delete from placement_stats where year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        \n",
    "        queryDelete=\"Delete from carrer_progression where passing_year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        queryDelete=\"Delete from placements where passing_year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        queryDelete=\"Delete from quality_education where passing_year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        \n",
    "        queryDelete=\"Delete from student where passing_year =%s\"\n",
    "        dataDelete=(drop_year,)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(queryDelete,dataDelete)\n",
    "        connection.commit()\n",
    "        \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to delete records {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_college(resultSet):\n",
    "     \n",
    "    query2 =\"Insert into college (college_id,college_name,college_address,college_state,time_stamp) values (%s,%s,%s,%s,%s) \"\n",
    "    \n",
    "    querySelect1=\"Select college_id from college\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect1)\n",
    "    recordsSelect1 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    prev_cid=[]\n",
    "    for row in recordsSelect1:\n",
    "        prev_cid.append(row[0])\n",
    "    if(resultSet[0] not in prev_cid):\n",
    "        cursor = connection.cursor()\n",
    "        ts=time.time()\n",
    "        list1=[ts]\n",
    "        tuple1=tuple(list1)\n",
    "        data=resultSet+tuple1\n",
    "        cursor.execute(query2,data)\n",
    "        connection.commit()\n",
    "        print(cursor.rowcount, \"Record inserted successfully into College table\")\n",
    "        cursor.close()\n",
    "    else:\n",
    "        querySelect2=\"Select college_address,college_state from college where college_id = %s \"\n",
    "        valuesSelect2_list=[resultSet[0]]\n",
    "        valuesSelect2=tuple(valuesSelect2_list)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect2,valuesSelect2)\n",
    "        recordsSelect2 = cursor.fetchall()\n",
    "        cursor.close()\n",
    "        for row in recordsSelect2:\n",
    "            c_add=row[0]\n",
    "            c_state=row[1]\n",
    "        if(c_add!=resultSet[2]):\n",
    "            print(\"Updating address\")\n",
    "            queryUpdate1=\"Update college set college_address=%s where college_id=%s\"\n",
    "            valuesUpdate1_list=[resultSet[2],resultSet[0]]\n",
    "            valuesUpdate1=tuple(valuesUpdate1_list)\n",
    "            ts=time.time()\n",
    "            valuesUpdate1=valuesUpdate1+(ts,)\n",
    "            cursor = connection.cursor()\n",
    "            cursor.execute(queryUpdate1,valuesUpdate1)\n",
    "            connection.commit()\n",
    "            cursor.close()\n",
    "        if(c_state!=resultSet[3]):\n",
    "            print(\"Updating state\")\n",
    "            queryUpdate2=\"Update college set college_state=%s where college_id=%s\"\n",
    "            valuesUpdate2_list=[resultSet[3],resultSet[0]]\n",
    "            valuesUpdate2=tuple(valuesUpdate2_list)\n",
    "            cursor = connection.cursor()\n",
    "            cursor = connection.cursor()\n",
    "            cursor.execute(queryUpdate2,valuesUpdate2)\n",
    "            connection.commit()\n",
    "            cursor.close()\n",
    "            \n",
    "            queryUpdate3=\"Update college set time_stamp=%s where college_id=%s\"\n",
    "            ts=time.time()\n",
    "            tempData=(ts,resultSet[0])\n",
    "            cursor = connection.cursor()\n",
    "            cursor = connection.cursor()\n",
    "            cursor.execute(queryUpdate3,tempData)\n",
    "            connection.commit()\n",
    "            cursor.close()\n",
    "            \n",
    "            \n",
    "        querySelect3=\"Select college_name from college where college_id=%s and time_stamp=(select max(time_stamp) from college group by college_id having college_id=%s) \"\n",
    "        valuesSelect3_list=[resultSet[0],resultSet[0]]\n",
    "        valuesSelect3=tuple(valuesSelect3_list)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect3,valuesSelect3)\n",
    "        recordsSelect3 = cursor.fetchall()\n",
    "        cursor.close()\n",
    "        for row in recordsSelect3:\n",
    "            c_name=row[0]\n",
    "        if(c_name!=resultSet[1]):\n",
    "            cursor = connection.cursor()\n",
    "            ts=time.time()\n",
    "            list1=[ts]\n",
    "            tuple1=tuple(list1)\n",
    "            data=resultSet+tuple1\n",
    "            cursor.execute(query2,data)\n",
    "            connection.commit()\n",
    "            print(cursor.rowcount, \"Record inserted successfully into College table\")\n",
    "            cursor.close()\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 Record inserted successfully into College table\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    #     dataInsert=('c_1','Thapar Univeristy','Patiala','Punjab')\n",
    "#     insert_college(dataInsert)\n",
    "\n",
    "    \n",
    "    path=directory+'colleges.csv'\n",
    "    df_colleges=pd.read_csv(path)\n",
    "    print(df_colleges.shape)\n",
    "    results=[]\n",
    "\n",
    "    for i in range(df_colleges.shape[0]):\n",
    "        temp=()\n",
    "        null_count=0\n",
    "        for j in range(df_colleges.shape[1]):\n",
    "        \n",
    "            val=df_colleges.iloc[i,j]\n",
    "            print(val)\n",
    "            if(j==0 and pd.isnull(val)):\n",
    "                break\n",
    "            if(j==1 and pd.isnull(val)):\n",
    "                null_count+=1\n",
    "                querySelect3=\"Select college_name from college where college_id=%s and time_stamp=(select max(time_stamp) from college group by college_id having college_id=%s) \"\n",
    "                valuesSelect3_list=[df_colleges.iloc[i,0],df_colleges.iloc[i,0]]\n",
    "                valuesSelect3=tuple(valuesSelect3_list)\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(querySelect3,valuesSelect3)\n",
    "                recordsSelect3 = cursor.fetchall()\n",
    "                n=cursor.count()\n",
    "                cursor.close()\n",
    "                for row in recordsSelect3:\n",
    "                    c_name=row[0]\n",
    "               \n",
    "                if(n>0):\n",
    "                    temp=temp+(c_name,)\n",
    "                else:\n",
    "                    val=None\n",
    "                    temp=temp+(val,)\n",
    "            if(j==2 and pd.isnull(val)):\n",
    "                null_count+=1\n",
    "                querySelect4=\"Select DISTINCT college_address from college where college_id=%s\"\n",
    "                valuesSelect4_list=[df_colleges.iloc[i,0]]\n",
    "                valuesSelect4=tuple(valuesSelect4_list)\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(querySelect4,valuesSelect4)\n",
    "                recordsSelect4 = cursor.fetchall()\n",
    "                n=cursor.rowcount\n",
    "                cursor.close()\n",
    "                for row in recordsSelect4:\n",
    "                    c_add=row[0]\n",
    "                    \n",
    "                if(n>0):\n",
    "                    temp=temp+(c_add,)\n",
    "                else:\n",
    "                    val=None\n",
    "                    temp=temp+(val,)\n",
    "            if(j==3 and pd.isnull(val)):\n",
    "                null_count+=1\n",
    "                querySelect5=\"Select DISTINCT college_state from college where college_id=%s\"\n",
    "                valuesSelect5_list=[df_colleges.iloc[i,0]]\n",
    "                valuesSelect5=tuple(valuesSelect5_list)\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(querySelect5,valuesSelect5)\n",
    "                recordsSelect5 = cursor.fetchall()\n",
    "                n=cursor.count()\n",
    "                cursor.close()\n",
    "                for row in recordsSelect5:\n",
    "                    c_state=row[0]\n",
    "                if(n>0):\n",
    "                    temp=temp+(c_state,)\n",
    "                else:\n",
    "                    val=None\n",
    "                    temp=temp+(val,)\n",
    "            \n",
    "            if(null_count==3):\n",
    "                break\n",
    "            if(pd.notnull(val)):\n",
    "                temp=temp+(val,)\n",
    "        print(temp)\n",
    "       \n",
    "        if(len(temp)>0):\n",
    "            results.append(temp)\n",
    "    print(results)\n",
    "    for i in range(len(results)):\n",
    "        insert_college(results[i])\n",
    "                \n",
    "                \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into College table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_branch(resultSet):\n",
    "     \n",
    "    query2 =\"Insert into branch (branch_id,branch_name,time_stamp) values (%s,%s,%s) \"\n",
    "    \n",
    "    querySelect1=\"Select branch_id from branch\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect1)\n",
    "    recordsSelect1 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    prev_bid=[]\n",
    "    for row in recordsSelect1:\n",
    "        prev_bid.append(row[0])\n",
    "    if(resultSet[0] not in prev_bid):\n",
    "        cursor = connection.cursor()\n",
    "        ts=time.time()\n",
    "        list1=[ts]\n",
    "        tuple1=tuple(list1)\n",
    "        data=resultSet+tuple1\n",
    "        cursor.execute(query2,data)\n",
    "        connection.commit()\n",
    "        print(cursor.rowcount, \"Record inserted successfully into Branch table\")\n",
    "        cursor.close()\n",
    "    else:\n",
    "        querySelect2=\"Select branch_name from branch where branch_id = %s \"\n",
    "        valuesSelect2_list=[resultSet[0]]\n",
    "        valuesSelect2=tuple(valuesSelect2_list)\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect2,valuesSelect2)\n",
    "        recordsSelect2 = cursor.fetchall()\n",
    "        cursor.close()\n",
    "        for row in recordsSelect2:\n",
    "            b_name=row[0]\n",
    "            \n",
    "        if(b_name!=resultSet[1]):\n",
    "            print(\"Updating branch name\")\n",
    "            queryUpdate1=\"Update branch set branch_name=%s where branch_id=%s\"\n",
    "            \n",
    "            \n",
    "            temp_tuple=tuple([resultSet[1],resultSet[0]])\n",
    "           \n",
    "            cursor = connection.cursor()\n",
    "            cursor.execute(queryUpdate1,temp_tuple)\n",
    "            connection.commit()\n",
    "            cursor.close()\n",
    "            \n",
    "            queryUpdate2=\"Update branch set time_stamp=%s where branch_id=%s\"\n",
    "            \n",
    "            ts=time.time()\n",
    "            temp_tuple=tuple([ts,resultSet[0]])\n",
    "           \n",
    "            cursor = connection.cursor()\n",
    "            cursor.execute(queryUpdate2,temp_tuple)\n",
    "            connection.commit()\n",
    "            cursor.close()\n",
    "            \n",
    "            \n",
    "       \n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updating branch name\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('b_1','Computer Engineering')\n",
    "    insert_branch(dataInsert)\n",
    "\n",
    "    \n",
    "    path=directory+'branches.csv'\n",
    "    df_branches=pd.read_csv(path)\n",
    "    print(df_branches.shape)\n",
    "    results=[]\n",
    "\n",
    "    for i in range(df_branches.shape[0]):\n",
    "        temp=()\n",
    "        null_count=0\n",
    "        for j in range(df_branches.shape[1]):\n",
    "        \n",
    "            val=df_branches.iloc[i,j]\n",
    "            print(val)\n",
    "            if(j==0 and pd.isnull(val)):\n",
    "                null_count+=1\n",
    "                break\n",
    "            if(j==1 and pd.isnull(val)):\n",
    "                null_count+=1\n",
    "                break\n",
    "            if(pd.notnull(val)):\n",
    "                temp=temp+(val,)\n",
    "        print(temp)\n",
    "       \n",
    "        if(len(temp)>0 and null_count==0):\n",
    "            results.append(temp)\n",
    "    print(results)\n",
    "    for i in range(len(results)):\n",
    "        insert_branch(results[i])\n",
    "                \n",
    "                \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into Branch table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_year(resultSet):\n",
    "     \n",
    "    query2 =\"Insert into year (year) values (%s) \"\n",
    "    \n",
    "    querySelect1=\"Select year from year\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect1)\n",
    "    recordsSelect1 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    prev_years=[]\n",
    "    for row in recordsSelect1:\n",
    "        prev_years.append(row[0])\n",
    "    \n",
    "        \n",
    "    if(resultSet[0] not in prev_years and type(resultSet[0]!=type(\"abc\")) and int(resultSet[0])<cur_year and int(resultSet[0])>=cur_year-6 ):\n",
    "        cursor = connection.cursor()\n",
    "       \n",
    "        data=tuple([int(resultSet[0])])\n",
    "        cursor.execute(query2,data)\n",
    "        connection.commit()\n",
    "        print(cursor.rowcount, \"Record inserted successfully into year table\")\n",
    "        cursor.close()\n",
    "  \n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4, 1)\n",
      "[[2015.0], [2017.0], [2013.0]]\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "     #dataInsert=tuple([2015])\n",
    "#     insert_year(dataInsert)\n",
    "\n",
    "    \n",
    "    path=directory+'years.csv'\n",
    "    df_years=pd.read_csv(path)\n",
    "    print(df_years.shape)\n",
    "    results=[]\n",
    "\n",
    "    for i in range(df_years.shape[0]):\n",
    "        \n",
    "        new_df=pd.to_numeric(df_years.iloc[:,0],errors='coerce')\n",
    "        \n",
    "        val=new_df.iloc[i]\n",
    "        if(pd.isnull(val)):\n",
    "            break\n",
    "        else:\n",
    "            temp_list=[val]\n",
    "            data=tuple(temp_list)\n",
    "            results.append(temp_list)\n",
    "    print(results)\n",
    "    for i in range(len(results)):\n",
    "        insert_year(results[i])\n",
    "                \n",
    "                \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into year table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_fee(resultSet):\n",
    "    query2 =\"Insert into fees (college_id,year,tuition_fee,hostel_fee,mess_fee,security_fee,other)values (%s,%s,%s,%s,%s,%s,%s) \"\n",
    "    \n",
    "    querySelect1=\"Select college_id from college\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect1)\n",
    "    recordsSelect1 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_cid=[]\n",
    "    \n",
    "    for row in recordsSelect1:\n",
    "        valid_cid.append(row[0])\n",
    "    if(resultSet[0] not in valid_cid):\n",
    "        print(\"Not a valid college id. Enter college first.\")\n",
    "        return\n",
    "        \n",
    "    querySelect2=\"Select year from year\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect2)\n",
    "    recordsSelect2 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_years=[]\n",
    "    for row in recordsSelect2:\n",
    "        valid_years.append(row[0])\n",
    "    y=int(resultSet[1])\n",
    "    if(y>=cur_year or y<=cur_year-6 ):\n",
    "        print(\"Not a valid year\")\n",
    "        return\n",
    "    elif (int(resultSet[1]) not in valid_years):\n",
    "        print(\"Enter year first\")\n",
    "        return\n",
    "    \n",
    "    else:\n",
    "        columns=['tuition_fee','hostel_fee','mess_fee','security_fee','other']\n",
    "        for j in range(7):\n",
    "            if(j>1 and resultSet[j]==0):\n",
    "                querySelect2=\"Select \"+columns[j-2]+\" from fees where college_id=%s and year=(Select max(year) from fees where year < %s group by college_id having college_id =%s)\"\n",
    "                valuesSelect2=(resultSet[0],resultSet[1],resultSet[0])\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(querySelect2,valuesSelect2)\n",
    "                recordsSelect2 = cursor.fetchall()\n",
    "                for row in recordsSelect2:\n",
    "                    missing_val=row[0]\n",
    "                if(cursor.rowcount!=0):\n",
    "                    resultSet_list=list(resultSet)\n",
    "                    resultSet_list[j]=missing_val\n",
    "                    resultSet=tuple(resultSet_list)\n",
    "                cursor.close()\n",
    "        \n",
    "        querySelect=\"Select tuition_fee,hostel_fee,mess_fee,security_fee,other from fees where college_id=%s and year=%s\"\n",
    "        selectTuple=(resultSet[0],resultSet[1])\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect,selectTuple)\n",
    "        records_fees = cursor.fetchall()\n",
    "        flags=[]\n",
    "        count_fees=-1\n",
    "        count_fees=cursor.rowcount\n",
    "            \n",
    "        for row in records_fees:\n",
    "            \n",
    "            tuition=row[0]\n",
    "            hostel=row[1]\n",
    "            mess=row[2]\n",
    "            security=row[3]\n",
    "            other=row[4]\n",
    "#             print(tuition)\n",
    "#             print(resultSet[3])\n",
    "#             print(hostel)\n",
    "#             print(resultSet[4])\n",
    "#             print(mess)\n",
    "#             print(resultSet[5])\n",
    "#             print(other)\n",
    "#             print(resultSet[6])\n",
    "            if(tuition !=resultSet[2] or hostel!=resultSet[3] or mess!=resultSet[4] or security!=resultSet[5] or other!=resultSet[6]):\n",
    "                cur_flag=1\n",
    "                    \n",
    "            else:\n",
    "                cur_flag=0\n",
    "            flags.append(cur_flag)   \n",
    "                    \n",
    "        cursor.close()\n",
    "        #print(count_fees)   \n",
    "        #print(flags)\n",
    "        if(0 in flags and count_fees!=-1):\n",
    "            print(\"duplicate record\") #all values are same\n",
    "            return\n",
    "        else: #HANDLE THIS \n",
    "            if(count_fees!=-1):\n",
    "                print(\"Duplicate dimensions found\")\n",
    "                option=int(input(\"Enter 1 to retain this version and 2 to drop\"))\n",
    "                if(option==1):\n",
    "                    print(\"Updating entry\")\n",
    "                    queryUpdate1=\"Update fees set tuition_fee= %s where college_id =%s and year=%s\"\n",
    "                    dataUpdate1=(resultSet[2],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate1,dataUpdate1)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate2=\"Update fees set hostel_fee=%s where college_id =%s and year=%s\"\n",
    "                    dataUpdate2=(resultSet[3],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate2,dataUpdate2)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate3=\"Update fees set mess_fee=%s where college_id =%s and year=%s\"\n",
    "                    dataUpdate3=(resultSet[4],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate3,dataUpdate3)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate4=\"Update fees set security_fee=%s where college_id =%s and year=%s\"\n",
    "                    dataUpdate4=(resultSet[5],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate4,dataUpdate4)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate5=\"Update fees set other=%s where college_id =%s and year=%s\"\n",
    "                    dataUpdate5=(resultSet[6],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate5,dataUpdate5)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    return\n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                else:\n",
    "                    return\n",
    "            else:\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(query2,resultSet)\n",
    "                connection.commit()\n",
    "                print(cursor.rowcount, \"Record inserted successfully into fees table\")\n",
    "                cursor.close()\n",
    "                return\n",
    "        \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate dimensions found\n",
      "Enter 1 to retain this version and 2 to drop2\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('c_3',2017,35,45000,25000,10000,8000)\n",
    "    insert_fee(dataInsert)\n",
    "\n",
    "    \n",
    "    path=directory+'fees.csv'\n",
    "    df_fees=pd.read_csv(path)\n",
    "    print(df_fees.shape)\n",
    "    results=[]\n",
    "  \n",
    "            \n",
    "    \n",
    "    \n",
    "    for i in range(df_fees.shape[0]):\n",
    "        \n",
    "        temp=()\n",
    "        null_count=0\n",
    "        for j in range(df_fees.shape[1]):\n",
    "            \n",
    "            if(j>0):\n",
    "                val=pd.to_numeric(df_fees.iloc[i,j],errors='coerce')\n",
    "            else:\n",
    "                val=df_fees.iloc[i,j]\n",
    "            \n",
    "            \n",
    "            \n",
    "            if((j==0 or j==1) and pd.isnull(val)):\n",
    "               \n",
    "                break\n",
    "            elif(pd.isnull(val) and j>1):\n",
    "                null_count+=1\n",
    "                val=0\n",
    "               \n",
    "            if(j!=0 and pd.notnull(val)):\n",
    "                val=int(val)\n",
    "                \n",
    "            temp=temp+(val,)\n",
    "        if(len(temp)==7 and null_count<5):\n",
    "            results.append(temp)\n",
    "    print(results)\n",
    "    for i in range(len(results)):\n",
    "        insert_fee(results[i])\n",
    "            \n",
    "           \n",
    "                \n",
    "                \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into fees table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_academics(resultSet):\n",
    "    query2 =\"Insert into academics (college_id,year,branch_id,seats,faculty,cutoff)values (%s,%s,%s,%s,%s,%s) \"\n",
    "    \n",
    "    querySelect1=\"Select college_id from college\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect1)\n",
    "    recordsSelect1 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_cid=[]\n",
    "    \n",
    "    for row in recordsSelect1:\n",
    "        valid_cid.append(row[0])\n",
    "    if(resultSet[0] not in valid_cid):\n",
    "        print(\"Not a valid college id. Enter college first.\")\n",
    "        return\n",
    "        \n",
    "    querySelect2=\"Select year from year\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect2)\n",
    "    recordsSelect2 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_years=[]\n",
    "    for row in recordsSelect2:\n",
    "        valid_years.append(row[0])\n",
    "    y=int(resultSet[1])\n",
    "    if(y>=cur_year or y<=cur_year-6 ):\n",
    "        print(\"Not a valid year\")\n",
    "        return\n",
    "    elif (int(resultSet[1]) not in valid_years):\n",
    "        print(\"Enter year first\")\n",
    "        return\n",
    "    \n",
    "    else:\n",
    "        querySelect2=\"Select branch_id from branch\"\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect2)\n",
    "        recordsSelect2 = cursor.fetchall()\n",
    "        cursor.close()\n",
    "        valid_bid=[]\n",
    "    \n",
    "        for row in recordsSelect2:\n",
    "            valid_bid.append(row[0])\n",
    "        if(resultSet[2] not in valid_bid):\n",
    "            print(\"Not a valid branch id. Enter branch first.\")\n",
    "            return\n",
    "  \n",
    "        columns=['seats','faculty','cutoff']\n",
    "        for j in range(3,6):\n",
    "            print(j)\n",
    "            if(resultSet[j]==-1):\n",
    "                querySelect2=\"Select \"+columns[j-3]+\" from academics where college_id=%s and branch_id =%s and year=(Select max(year) from academics where year < %s group by college_id having college_id =%s)\"\n",
    "                valuesSelect2=(resultSet[0],resultSet[2],resultSet[1],resultSet[0])\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(querySelect2,valuesSelect2)\n",
    "                recordsSelect2 = cursor.fetchall()\n",
    "                for row in recordsSelect2:\n",
    "                    missing_val=row[0]\n",
    "                if(cursor.rowcount!=0):\n",
    "                    resultSet_list=list(resultSet)\n",
    "                    resultSet_list[j]=missing_val\n",
    "                    resultSet=tuple(resultSet_list)\n",
    "                cursor.close()\n",
    "        \n",
    "        querySelect=\"Select seats,faculty,cutoff from academics where college_id=%s and branch_id=%s and year=%s\"\n",
    "        selectTuple=(resultSet[0],resultSet[2],int(resultSet[1]))\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect,selectTuple)\n",
    "        records_academics = cursor.fetchall()\n",
    "        flags=[]\n",
    "        count_records=-1\n",
    "        count_records=cursor.rowcount\n",
    "            \n",
    "        for row in records_academics:\n",
    "            \n",
    "            seats=row[0]\n",
    "            faculty=row[1]\n",
    "            cutoff=row[2]\n",
    "#             print(tuition)\n",
    "#             print(resultSet[3])\n",
    "#             print(hostel)\n",
    "#             print(resultSet[4])\n",
    "#             print(mess)\n",
    "#             print(resultSet[5])\n",
    "#             print(other)\n",
    "#             print(resultSet[6])\n",
    "            if(seats !=resultSet[3] or faculty!=resultSet[4] or cutoff!=resultSet[5] ):\n",
    "                cur_flag=1\n",
    "                    \n",
    "            else:\n",
    "                cur_flag=0\n",
    "            flags.append(cur_flag)   \n",
    "                    \n",
    "        cursor.close()\n",
    "        #print(count_fees)   \n",
    "        #print(flags)\n",
    "        if(0 in flags and count_records!=-1):\n",
    "            print(\"duplicate\")\n",
    "            return\n",
    "        else:\n",
    "            if(count_records>0):\n",
    "                print(\"Duplicate dimensions found\")\n",
    "                option=int(input(\"Enter 1 to retain this version and 2 to drop\"))\n",
    "                if(option==1):\n",
    "                    print(\"Updating entry\")\n",
    "                    queryUpdate1=\"Update academics set seats= %s where college_id =%s and year=%s and branch_id=%s\"\n",
    "                    dataUpdate1=(resultSet[3],resultSet[0],resultSet[1],resultSet[2])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate1,dataUpdate1)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate2=\"Update academics set faculty=%s where college_id =%s and year=%s and branch_id=%s\"\n",
    "                    dataUpdate2=(resultSet[4],resultSet[0],resultSet[1],resultSet[2])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate2,dataUpdate2)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate3=\"Update academics set cutoff=%s where college_id =%s and year=%s and branch_id=%s\"\n",
    "                    dataUpdate3=(resultSet[5],resultSet[0],resultSet[1],resultSet[2])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate3,dataUpdate3)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                else:\n",
    "                    return\n",
    "            else:\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(query2,resultSet)\n",
    "                connection.commit()\n",
    "                print(cursor.rowcount, \"Record inserted successfully into academics table\")\n",
    "                cursor.close()\n",
    "                return\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "4\n",
      "5\n",
      "duplicate\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('c_1', 2019, 'b_1', -1, 53.0, 9500.0)\n",
    "    insert_academics(dataInsert)\n",
    "\n",
    "    \n",
    "    path=directory+'academics.csv'\n",
    "    df_academics=pd.read_csv(path)\n",
    "    print(df_academics.shape)\n",
    "    results=[]\n",
    "  \n",
    "            \n",
    "    \n",
    "    \n",
    "    for i in range(df_academics.shape[0]):\n",
    "        \n",
    "        temp=()\n",
    "        null_count=0\n",
    "        for j in range(df_academics.shape[1]):\n",
    "            \n",
    "            if(j>2):\n",
    "                val=pd.to_numeric(df_academics.iloc[i,j],errors='coerce')\n",
    "            elif (j==1):\n",
    "                val=int(df_academics.iloc[i,j])\n",
    "            \n",
    "            else:\n",
    "                val=df_academics.iloc[i,j]\n",
    "            \n",
    "            \n",
    "            \n",
    "            if((j==0 or j==1 or j==2) and pd.isnull(val)):\n",
    "               \n",
    "                break\n",
    "            elif(pd.isnull(val) and (j==3 or j==4)):\n",
    "                null_count+=1\n",
    "                val=-1\n",
    "            elif(pd.isnull(val) and j==5):\n",
    "                null_count+=1\n",
    "                val=0\n",
    "               \n",
    "            \n",
    "                \n",
    "            temp=temp+(val,)\n",
    "        if(len(temp)==6 and null_count<3):\n",
    "            results.append(temp)\n",
    "    print(results)\n",
    "    for i in range(len(results)):\n",
    "        insert_academics(results[i])\n",
    "            \n",
    "           \n",
    "                \n",
    "                \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into academics table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_extra(resultSet):\n",
    "    query2 =\"Insert into extracurricular (college_id,year,clubs,societis,fests,sports,audi)values (%s,%s,%s,%s,%s,%s,%s) \"\n",
    "    \n",
    "    querySelect1=\"Select college_id from college\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect1)\n",
    "    recordsSelect1 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_cid=[]\n",
    "    \n",
    "    for row in recordsSelect1:\n",
    "        valid_cid.append(row[0])\n",
    "    if(resultSet[0] not in valid_cid):\n",
    "        print(\"Not a valid college id. Enter college first.\")\n",
    "        return\n",
    "        \n",
    "    querySelect2=\"Select year from year\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect2)\n",
    "    recordsSelect2 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_years=[]\n",
    "    for row in recordsSelect2:\n",
    "        valid_years.append(row[0])\n",
    "    y=int(resultSet[1])\n",
    "    if(y>=cur_year or y<=cur_year-6 ):\n",
    "        print(\"Not a valid year\")\n",
    "        return\n",
    "    elif (int(resultSet[1]) not in valid_years):\n",
    "        print(\"Enter year first\")\n",
    "        return\n",
    "    \n",
    "    else:\n",
    "        \n",
    "        columns=['clubs','societis','fests','sports','audi']\n",
    "        for j in range(2,7):\n",
    "            \n",
    "            if(resultSet[j]==-1):\n",
    "                querySelect2=\"Select \"+columns[j-2]+\" from extracurricular where college_id=%s and year=(Select max(year) from extracurricular where year < %s group by college_id having college_id =%s)\"\n",
    "                valuesSelect2=(resultSet[0],resultSet[1],resultSet[0])\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(querySelect2,valuesSelect2)\n",
    "                recordsSelect2 = cursor.fetchall()\n",
    "                for row in recordsSelect2:\n",
    "                    missing_val=row[0]\n",
    "                if(cursor.rowcount!=0):\n",
    "                    resultSet_list=list(resultSet)\n",
    "                    resultSet_list[j]=missing_val\n",
    "                    resultSet=tuple(resultSet_list)\n",
    "                cursor.close()\n",
    "        \n",
    "        querySelect=\"Select clubs,societis,fests,sports,audi from extracurricular where college_id=%s and year=%s\"\n",
    "        selectTuple=(resultSet[0],int(resultSet[1]))\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect,selectTuple)\n",
    "        records_academics = cursor.fetchall()\n",
    "        flags=[]\n",
    "        count_records=-1\n",
    "        count_records=cursor.rowcount\n",
    "            \n",
    "        for row in records_academics:\n",
    "            \n",
    "            \n",
    "            clubs=row[0]\n",
    "            society=row[1]\n",
    "            fests=row[2]\n",
    "            sports=row[3]\n",
    "            audi=row[4]\n",
    "#             print(tuition)\n",
    "#             print(resultSet[3])\n",
    "#             print(hostel)\n",
    "#             print(resultSet[4])\n",
    "#             print(mess)\n",
    "#             print(resultSet[5])\n",
    "#             print(other)\n",
    "#             print(resultSet[6])\n",
    "            if(clubs !=resultSet[2] or society!=resultSet[3] or fests!=resultSet[4] or sports!=resultSet[5] or audi!=resultSet[6] ):\n",
    "                cur_flag=1\n",
    "                    \n",
    "            else:\n",
    "                cur_flag=0\n",
    "            flags.append(cur_flag)   \n",
    "                    \n",
    "        cursor.close()\n",
    "        #print(count_fees)   \n",
    "        #print(flags)\n",
    "        if(0 in flags and count_records!=-1):\n",
    "            print(\"duplicate\")\n",
    "            return\n",
    "        else:\n",
    "            if(count_records>0):\n",
    "                print(\"Duplicate dimensions found\")\n",
    "                option=int(input(\"Enter 1 to retain this version and 2 to drop\"))\n",
    "                if(option==1):\n",
    "                    print(\"Updating entry\")\n",
    "                    queryUpdate1=\"Update extracurricular set clubs= %s where college_id =%s and year=%s \"\n",
    "                    dataUpdate1=(resultSet[2],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate1,dataUpdate1)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate2=\"Update extracurricular set societis= %s where college_id =%s and year=%s \"\n",
    "                    dataUpdate2=(resultSet[3],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate2,dataUpdate2)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate3=\"Update extracurricular set fests= %s where college_id =%s and year=%s \"\n",
    "                    dataUpdate3=(resultSet[4],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate3,dataUpdate3)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate4=\"Update extracurricular set sports= %s where college_id =%s and year=%s \"\n",
    "                    dataUpdate4=(resultSet[5],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate4,dataUpdate4)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate5=\"Update extracurricular set audi= %s where college_id =%s and year=%s \"\n",
    "                    dataUpdate5=(resultSet[6],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate5,dataUpdate5)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                else:\n",
    "                    return\n",
    "            else:\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(query2,resultSet)\n",
    "                connection.commit()\n",
    "                print(cursor.rowcount, \"Record inserted successfully into extracurricular table\")\n",
    "                cursor.close()\n",
    "                return\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 Record inserted successfully into academics table\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('c_2',2017,-1,26,-1,1,1)\n",
    "    insert_extra(dataInsert)\n",
    "\n",
    "    \n",
    "    path=directory+'extra.csv'\n",
    "    df_extra=pd.read_csv(path)\n",
    "    print(df_extra.shape)\n",
    "    results=[]\n",
    "  \n",
    "            \n",
    "    \n",
    "    \n",
    "    for i in range(df_extra.shape[0]):\n",
    "        \n",
    "        temp=()\n",
    "        null_count=0\n",
    "        for j in range(df_extra.shape[1]):\n",
    "            \n",
    "            if(j>0):\n",
    "                val=pd.to_numeric(df_extra.iloc[i,j],errors='coerce')\n",
    "            else:\n",
    "                val=df_extra.iloc[i,j]\n",
    "            \n",
    "            \n",
    "            \n",
    "            if((j==0 or j==1) and pd.isnull(val)):\n",
    "               \n",
    "                break\n",
    "            elif(pd.isnull(val) and j>1):\n",
    "                null_count+=1\n",
    "                val=-1\n",
    "               \n",
    "            if(j!=0 and pd.notnull(val)):\n",
    "                val=int(val)\n",
    "                \n",
    "            temp=temp+(val,)\n",
    "        if(len(temp)==7 and null_count<5):\n",
    "            results.append(temp)\n",
    "    print(results)\n",
    "    for i in range(len(results)):\n",
    "        insert_extra(results[i])\n",
    "            \n",
    "           \n",
    "                \n",
    "                \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into extracurricular table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_rating(resultSet):\n",
    "    query2 =\"Insert into reputation (college_id,year,rating)values (%s,%s,%s) \"\n",
    "    \n",
    "    querySelect1=\"Select college_id from college\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect1)\n",
    "    recordsSelect1 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_cid=[]\n",
    "    \n",
    "    for row in recordsSelect1:\n",
    "        valid_cid.append(row[0])\n",
    "    if(resultSet[0] not in valid_cid):\n",
    "        print(\"Not a valid college id. Enter college first.\")\n",
    "        return\n",
    "        \n",
    "    querySelect2=\"Select year from year\"\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(querySelect2)\n",
    "    recordsSelect2 = cursor.fetchall()\n",
    "    cursor.close()\n",
    "    valid_years=[]\n",
    "    for row in recordsSelect2:\n",
    "        valid_years.append(row[0])\n",
    "    y=int(resultSet[1])\n",
    "    if(y>=cur_year or y<=cur_year-6 ):\n",
    "        print(\"Not a valid year\")\n",
    "        return\n",
    "    elif (int(resultSet[1]) not in valid_years):\n",
    "        print(\"Enter year first\")\n",
    "        return\n",
    "    \n",
    "    else:\n",
    "        if(resultSet[2]==-1):\n",
    "            querySelect2=\"Select rating from reputation where college_id=%s and year=(Select max(year) from reputation where year < %s group by college_id having college_id =%s)\"\n",
    "            valuesSelect2=(resultSet[0],resultSet[1],resultSet[0])\n",
    "            cursor = connection.cursor()\n",
    "            cursor.execute(querySelect2,valuesSelect2)\n",
    "            recordsSelect2 = cursor.fetchall()\n",
    "            for row in recordsSelect2:\n",
    "                missing_val=row[0]\n",
    "            if(cursor.rowcount!=0):\n",
    "                resultSet_list=list(resultSet)\n",
    "                resultSet_list[2]=missing_val\n",
    "                resultSet=tuple(resultSet_list)\n",
    "            cursor.close()\n",
    "        \n",
    "        querySelect=\"Select rating from reputation where college_id=%s and year=%s\"\n",
    "        selectTuple=(resultSet[0],int(resultSet[1]))\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(querySelect,selectTuple)\n",
    "        records_rating = cursor.fetchall()\n",
    "        \n",
    "        count_records=-1\n",
    "        count_records=cursor.rowcount\n",
    "        cur_flag=-1    \n",
    "        for row in records_rating:\n",
    "            \n",
    "            rating=row[0]\n",
    "            if(rating !=resultSet[2] ):\n",
    "                cur_flag=1\n",
    "                    \n",
    "            else:\n",
    "                cur_flag=0\n",
    "            \n",
    "        if(cur_flag==0 and count_records==1):\n",
    "            print(\"duplicate\")\n",
    "            return\n",
    "        else:\n",
    "            if(count_records>0):\n",
    "                print(\"Duplicate dimensions found\")\n",
    "                option=int(input(\"Enter 1 to retain this version and 2 to drop\"))\n",
    "                if(option==1):\n",
    "                    print(\"Updating entry\")\n",
    "                    queryUpdate1=\"Update reputatin set rating= %s where college_id =%s and year=%s\"\n",
    "                    dataUpdate1=(resultSet[2],resultSet[0],resultSet[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate1,dataUpdate1)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                  \n",
    "                else:\n",
    "                    return\n",
    "            else:\n",
    "                if(resultSet[2]!=-1):\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(query2,resultSet)\n",
    "                    connection.commit()\n",
    "                    print(cursor.rowcount, \"Record inserted successfully into reputation table\")\n",
    "                    cursor.close()\n",
    "                    return\n",
    "                else:\n",
    "                    print(\"rating missing\")\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6, 3)\n",
      "[('c_1', 2015, -1), ('c_3', 2014, 5.0)]\n",
      "rating missing\n",
      "Not a valid year\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    #dataInsert=('c_1', 2019, 4)\n",
    "    #insert_rating(dataInsert)\n",
    "\n",
    "    \n",
    "    path=directory+'reputation.csv'\n",
    "    df_reputation=pd.read_csv(path)\n",
    "    print(df_reputation.shape)\n",
    "    results=[]\n",
    "    for i in range(df_reputation.shape[0]):\n",
    "        \n",
    "        temp=()\n",
    "        \n",
    "        for j in range(df_reputation.shape[1]):\n",
    "            \n",
    "            if(j==1 or j==2):\n",
    "                val=pd.to_numeric(df_reputation.iloc[i,j])\n",
    "                if (j==1 and pd.notnull(val)):\n",
    "                    val=int(val)\n",
    "            \n",
    "            else:\n",
    "                val=df_reputation.iloc[i,j]\n",
    "            \n",
    "            \n",
    "            \n",
    "            if((j==0 or j==1 ) and pd.isnull(val)):\n",
    "               \n",
    "                break\n",
    "            elif(j==2 and (val >5  or val<5)):\n",
    "                break\n",
    "                \n",
    "            elif(pd.isnull(val)):\n",
    "                \n",
    "                val=-1\n",
    "            temp=temp+(val,)\n",
    "        if(len(temp)==3):\n",
    "            results.append(temp)\n",
    "    print(results)\n",
    "    for i in range(len(results)):\n",
    "        insert_rating(results[i])\n",
    "            \n",
    "           \n",
    "                \n",
    "                \n",
    "        \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into reputation table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_students(values):\n",
    "    query_ins= \"insert into student (roll_number, college_id, passing_year, student_name, degree,time_stamp) values(%s,%s,%s,%s,%s,%s)\"\n",
    "    clg_ids=[]\n",
    "    ans=[]\n",
    "    query=\"select college_id from college\"\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query)\n",
    "    records=cursor.fetchall()\n",
    "    for row in records:\n",
    "        clg_ids.append(row[0])\n",
    "    \n",
    "    roll_no=[]\n",
    "    query1=\"select roll_number from student\"\n",
    "    cursor1=connection.cursor()\n",
    "    cursor1.execute(query1)\n",
    "    records1=cursor1.fetchall()\n",
    "#     print(clg_ids)\n",
    "    for row in records1:\n",
    "        roll_no.append(row[0])\n",
    "    if values[0] not in roll_no:\n",
    "        if values[1] in clg_ids:\n",
    "            if (cur_year-int(values[2])<=5 and cur_year-int(values[2])>=1):\n",
    "                cursor = connection.cursor()\n",
    "                ts=time.time()\n",
    "                list1=[ts]\n",
    "                tuple1=tuple(list1)\n",
    "                data=values+tuple1\n",
    "                cursor.execute(query_ins,data)\n",
    "                 \n",
    "                connection.commit()\n",
    "                print(cursor.rowcount, \"Record inserted successfully into students table\")\n",
    "                cursor.close()\n",
    "            else:\n",
    "                print(\"Enter the value of year for last five years\")\n",
    "    else:\n",
    "        if values[1] in clg_ids:\n",
    "            if (cur_year-int(values[2])<=5 and cur_year-int(values[2])>=1):\n",
    "                querySelect2=\"Select passing_year,student_name, degree from student where roll_number = %s and college_id = %s\"\n",
    "                valuesSelect2_list=[values[0],values[1]]\n",
    "                valuesSelect2=tuple(valuesSelect2_list)\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(querySelect2,valuesSelect2)\n",
    "                records2 = cursor.fetchall()\n",
    "                cursor.close()\n",
    "                s_py=''\n",
    "                s_sn=''\n",
    "                s_deg=''\n",
    "                for r in records2:\n",
    "                    s_py=int(r[0])\n",
    "                    print(s_py)\n",
    "                    s_sn=r[1]\n",
    "                    s_deg=r[2]\n",
    "                if s_py!=values[2]:\n",
    "                    print(\"Updating passing year\")\n",
    "                    queryUpdate1=\"Update student set passing_year = %s where roll_number = %s and college_id = %s\"\n",
    "                    valuesUpdate1_list=[int(values[2]),values[0],values[1]]\n",
    "                    valuesUpdate1=tuple(valuesUpdate1_list)\n",
    "                   \n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate1,valuesUpdate1)\n",
    "                   \n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate4=\"Update student set time_stamp=%s where roll_number = %s and college_id = %s\"\n",
    "                    ts=time.time()\n",
    "                    tempData=(ts,values[0],values[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate4,tempData)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                if(s_sn!=values[3]):\n",
    "                    print(\"Updating name\")\n",
    "                    queryUpdate2=\"Update student set student_name = %s where roll_number = %s and college_id = %s\"\n",
    "                    valuesUpdate2_list=[values[3],values[0],values[1]]\n",
    "                    valuesUpdate2=tuple(valuesUpdate2_list)\n",
    "                   \n",
    "                    cursor = connection.cursor()\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate2,valuesUpdate2)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    \n",
    "                    queryUpdate4=\"Update student set time_stamp=%s where roll_number = %s and college_id = %s\"\n",
    "                    ts=time.time()\n",
    "                    tempData=(ts,values[0],values[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate4,tempData)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                if(s_deg!=values[4]):\n",
    "                    print(\"Updating degree\")\n",
    "                    queryUpdate3=\"Update student set degree = %s where roll_number = %s and college_id = %s\"\n",
    "                    valuesUpdate3_list=[values[4],values[0],values[1]]\n",
    "                    valuesUpdate3=tuple(valuesUpdate3_list)\n",
    "                    \n",
    "                    cursor = connection.cursor()\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate3,valuesUpdate3)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "                    queryUpdate4=\"Update student set time_stamp=%s where roll_number = %s and college_id = %s\"\n",
    "                    ts=time.time()\n",
    "                    tempData=(ts,values[0],values[1])\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor = connection.cursor()\n",
    "                    cursor.execute(queryUpdate4,tempData)\n",
    "                    connection.commit()\n",
    "                    cursor.close()\n",
    "                    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 Record inserted successfully into students table\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('101411028','c_3', 2018 ,'Pragya','Btech')\n",
    "    insert_students(dataInsert)\n",
    "    \n",
    "    \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into student table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_placements(results):\n",
    "    query_ins=\"insert into placements(roll_number, college_id, passing_year,company_name,profile, package) values(%s,%s,%s,%s,%s,%s)\"\n",
    "    query=\"select roll_number,college_id,passing_year from student\";\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query)\n",
    "    records=cursor.fetchall()\n",
    "    list_of_tuples=[]\n",
    "    for row in records:\n",
    "        list_of_tuples.append(row)\n",
    "        \n",
    "        \n",
    "    query1=\"select roll_number,college_id,passing_year,company_name, profile, package from placements\";\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query1)\n",
    "    records1=cursor.fetchall()\n",
    "    list_of_all_tuples=[]\n",
    "    for row in records1:\n",
    "        list_of_all_tuples.append(row)\n",
    "    if pd.isnull(results[3]) and pd.isnull(results[4]) and pd.isnull(results[5]):\n",
    "        print(\"Cannot insert all the null values\")\n",
    "    elif pd.isnull(results[2]):\n",
    "        print(\"Year cannot be null\")\n",
    "    elif results in list_of_all_tuples:\n",
    "        print(\"Duplicate rows\")\n",
    "    else:\n",
    "        tup=(results[0],results[1],results[2])\n",
    "        if tup in list_of_tuples:\n",
    "            ans=int(input(\"Enter 1 to update the row or 0 to drop the row : \"))\n",
    "            if ans ==1:\n",
    "                queryDel=\"Delete from placements where roll_number=%s and college_id= %s and passing_year= %s\"\n",
    "                cursor1=connection.cursor()\n",
    "                cursor1.execute(queryDel,tup)\n",
    "                print(cursor1.rowcount, \"Record deleted successfully from Placements table\")\n",
    "                cursor1.close()\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(query_ins,results)\n",
    "                connection.commit()\n",
    "                print(cursor.rowcount, \"Record inserted successfully into Placements table\")\n",
    "                cursor.close()\n",
    "            else:\n",
    "                print(\"New record is ignored\")\n",
    "                \n",
    "        else:\n",
    "            print(\"Cannot enter data because of foreign key constraints\")\n",
    "            \n",
    "\n",
    "            \n",
    "        \n",
    "        \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cannot enter data because of foreign key constraints\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "\n",
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('MT19070','c1',2018,\"Google\",\"SDE\",30)\n",
    "    insert_placements(dataInsert)\n",
    "    \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into placements table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_quality_edu(results):\n",
    "    query_ins=\"insert into quality_education(roll_number, college_id, passing_year,satisfaction) values(%s,%s,%s,%s)\"\n",
    "    query=\"select roll_number,college_id,passing_year from student\";\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query)\n",
    "    records=cursor.fetchall()\n",
    "    list_of_tuples=[]\n",
    "    for row in records:\n",
    "        list_of_tuples.append(row)\n",
    "        \n",
    "    query1=\"select roll_number,college_id,passing_year, satisfaction from quality_education\";\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query1)\n",
    "    records1=cursor.fetchall()\n",
    "    list_of_all_tuples=[]\n",
    "    for row in records1:\n",
    "        list_of_all_tuples.append(row)\n",
    "    if pd.isnull(results[2]):\n",
    "        print(\"Year cannot be null\")\n",
    "    elif pd.isnull(results[3]):\n",
    "        print(\"Cannot insert all the null values\")\n",
    "    elif(results[3]>5 or results[3]<1):\n",
    "        print(\"Enter the satisfaction in range of 1 to 5\")\n",
    "    elif results in list_of_all_tuples:\n",
    "        print(\"Duplicate rows\")\n",
    "    else:\n",
    "        tup=(results[0],results[1],results[2])\n",
    "        if tup in list_of_tuples:\n",
    "            ans=int(input(\"Enter 1 to update the row or 0 to drop the row : \"))\n",
    "            if ans ==1:\n",
    "                queryDel=\"Delete from quality_education where roll_number=%s and college_id= %s and passing_year= %s\"\n",
    "                cursor1=connection.cursor()\n",
    "                cursor1.execute(queryDel,tup)\n",
    "                print(cursor1.rowcount, \"Record deleted successfully from quality education table\")\n",
    "                cursor.close()\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(query_ins,results)\n",
    "                connection.commit()\n",
    "                print(cursor.rowcount, \"Record inserted successfully into Quality Education table\")\n",
    "                cursor.close\n",
    "            else:\n",
    "                print(\"New record is ignored\")\n",
    "        else:\n",
    "            print(\"Cannot enter data because of foreign key constraints\")\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cannot enter data because of foreign key constraints\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('MT19073','c1',2018,3)\n",
    "    insert_quality_edu(dataInsert)\n",
    "    \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into Quality Education table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_career_prog(results):\n",
    "    query_ins=\"insert into carrer_progression(roll_number, college_id, passing_year,overall_satisfaction) values(%s,%s,%s,%s)\"\n",
    "    query=\"select roll_number,college_id,passing_year from student\";\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query)\n",
    "    records=cursor.fetchall()\n",
    "    list_of_tuples=[]\n",
    "    for row in records:\n",
    "        list_of_tuples.append(row)\n",
    "        \n",
    "    query1=\"select roll_number,college_id,passing_year, overall_satisfaction from carrer_progression\";\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query1)\n",
    "    records1=cursor.fetchall()\n",
    "    list_of_all_tuples=[]\n",
    "    for row in records1:\n",
    "        list_of_all_tuples.append(row)\n",
    "    if pd.isnull(results[2]):\n",
    "        print(\"Year cannot be null\")\n",
    "    elif pd.isnull(results[3]):\n",
    "        print(\"Cannot insert all the null values\")\n",
    "    elif(results[3]>5 or results[3]<1):\n",
    "        print(\"Enter the satisfaction in range of 1 to 5\")\n",
    "    elif results in list_of_all_tuples:\n",
    "        print(\"Duplicate rows\")\n",
    "    else:\n",
    "        tup=(results[0],results[1],results[2])\n",
    "        if tup in list_of_tuples:\n",
    "            ans=int(input(\"Enter 1 to update the row or 0 to drop the row : \"))\n",
    "            if ans ==1:\n",
    "                queryDel=\"Delete from carrer_progression where roll_number=%s and college_id= %s and passing_year= %s\"\n",
    "                cursor1=connection.cursor()\n",
    "                cursor1.execute(queryDel,tup)\n",
    "                print(cursor1.rowcount, \"Record deleted successfully from career progression table\")\n",
    "                cursor.close()\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(query_ins,results)\n",
    "                connection.commit()\n",
    "                print(cursor.rowcount, \"Record inserted successfully into career progression table\")\n",
    "                cursor.close\n",
    "            else:\n",
    "                print(\"New record is ignored\")\n",
    "        else:\n",
    "            print(\"Cannot enter data because of foreign key constraints\")\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cannot enter data because of foreign key constraints\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "   \n",
    "\n",
    "    dataInsert=('MT19073','c1',2018,2)\n",
    "    insert_career_prog(dataInsert)\n",
    "    \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into Career Progression table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_place_stats():\n",
    "    query=\"select college_id from college\";\n",
    "    cursor=connection.cursor()\n",
    "    cursor.execute(query)\n",
    "    records=cursor.fetchall()\n",
    "    cids=[]\n",
    "    for row in records:\n",
    "        cids.append(row[0])\n",
    "    cids=list(set(cids))\n",
    "#     print(cids)\n",
    "    query5=\"select year from year\";\n",
    "    cursor5=connection.cursor()\n",
    "    cursor5.execute(query5)\n",
    "    records5=cursor5.fetchall()\n",
    "    uni_year=[]\n",
    "    for row in records5:\n",
    "        uni_year.append(row[0])\n",
    "    uni_year=list(set(uni_year))\n",
    "    print(uni_year)\n",
    "    \n",
    "    for i in cids:\n",
    "        max_pkg={}\n",
    "        sum_pkg={}\n",
    "        \n",
    "        count_year={}\n",
    "        tup=(i,)\n",
    "        query1=\"select passing_year,package from placements where college_id = %s\"\n",
    "        cursor1=connection.cursor()\n",
    "        cursor1.execute(query1,tup)\n",
    "        records=cursor1.fetchall()\n",
    "        print(records)\n",
    "        print(cursor1.rowcount, \"Record selected\")\n",
    "        cursor1.close()\n",
    "        for row in records:\n",
    "            max_pkg[row[0]]=0\n",
    "            sum_pkg[row[0]]=0\n",
    "            count_year[row[0]]=0\n",
    "        for row in records:\n",
    "            x=max_pkg[row[0]]\n",
    "            if(row[1]>x):\n",
    "                max_pkg[row[0]]=row[1]\n",
    "            sum_pkg[row[0]]+=row[1]\n",
    "            count_year[row[0]]+=1\n",
    "        \n",
    "        \n",
    "        for y in sum_pkg:\n",
    "            if(count_year[y]!=0):\n",
    "                sum_pkg[y]/=count_year[y]\n",
    "        queryInsert=\"insert into placement_stats (college_id,year,highest_package,avg_package) values (%s,%s,%s,%s)\"\n",
    "        \n",
    "        for y in sum_pkg:\n",
    "            tempTuple=(i,)\n",
    "            tempTuple=tempTuple+(y,max_pkg[y],sum_pkg[y])\n",
    "            print(tempTuple)\n",
    "            cursor2=connection.cursor()\n",
    "            cursor2.execute(queryInsert,tempTuple)\n",
    "            connection.commit()\n",
    "            cursor2.close()\n",
    "        \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2017, 2018, 2019]\n",
      "[]\n",
      "0 Record selected\n",
      "[(2019, Decimal('1800000'))]\n",
      "1 Record selected\n",
      "('c_3', 2019, Decimal('1800000'), Decimal('1800000'))\n",
      "[(2017, Decimal('2700000'))]\n",
      "1 Record selected\n",
      "('c_1', 2017, Decimal('2700000'), Decimal('2700000'))\n",
      "[]\n",
      "0 Record selected\n",
      "MySQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    connection = mysql.connector.connect(host='localhost', database='dw2',user='root',password='pragyasql')\n",
    "    \n",
    "    insert_place_stats()\n",
    "    \n",
    "except mysql.connector.Error as error:\n",
    "    print(\"Failed to insert record into Placement Stats table {}\".format(error))\n",
    "\n",
    "finally:\n",
    "    if (connection.is_connected()):\n",
    "        connection.close()\n",
    "        print(\"MySQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
